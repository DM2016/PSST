#!/bin/bash
# Copyright: NCBI 2017
# Authors: Sean La

# Exit the script immediately if there is an error
set -e

# Description and usage messages
description() {
    printf "PSST version 1.2\n"
	printf "Description: Calls SNPs in multiple NGS datasets.\n"
}

usage() { 
	BASENAME=`basename "$0"`
	printf "Usage: ${BASENAME} [-h description and usage] [-i input list file] [-n SNP accessions] "
    printf "[-d working directory]\n            [-e email for Entrez] [-t threads per Magic-BLAST call] "
    printf "[-p max number of concurrent Magic-BLAST calls]\n"
    printf "            [-q input file is a list of FASTQ] [-a input file is a list of FASTA]\n"
}

# Command line arguments
while getopts ":hi:n:d:e:t:p:fa" opt; do
    case ${opt} in
        h)
            description 
            usage
            exit 0
            ;;
        i) # path to the NGS list file
            INPUT=${OPTARG}
            ;;
        n) # path to the SNP accessions file
            SNP_ACC=${OPTARG}
            ;;
        d) # path to the working directory
            DIR=${OPTARG}
            ;;
        e) # email address to give to Entrez
            EMAIL=${OPTARG}
            ;;
        t) # number of threads per Magic-BLAST run
            THREADS=${OPTARG}
            ;;
        p) # maximum number of concurrent Magic-BLAST runs
            PROCS=${OPTARG}
            ;;
        f) # Input file is a list of FASTQ accessions
            IS_FASTQ=0
            ;;
        a) # Input file is a list of FASTA accessions
            IS_FASTA=0
            ;;
        \?)
            echo "Invalid option: -${OPTARG}" >&2
            usage
            exit 1
            ;;
    esac
done

# Check whether all the necessary command line options have all been inputted and are correct
if [ -n "${IS_FASTA}" ] && [ -n "${IS_FASTQ}" ]; then
    echo "Error: input file cannot be both a list of FASTA and FASTQ files."
    OPTS_INCOMPLETE=0
fi
if [ -z "${SNP_ACC}" ]; then
    echo "Error: please provide a SNP accessions file."
    OPTS_INCOMPLETE=0
fi
if [ -z "${DIR}" ]; then
    echo "Error: please specify a working directory."
    OPTS_INCOMPLETE=0
fi
if [ -z "${EMAIL}" ]; then
    echo "Error: please provide an email address for Entrez."
    OPTS_INCOMPLETE=0
fi
if [ -z "${THREADS}" ]; then
    echo "Error: please specify the number of threads to give to each Magic-BLAST run."
    OPTS_INCOMPLETE=0
fi
if [ -z "${PROCS}" ]; then
    echo "Error: please specify the maximum number of child processes for this program."
    OPTS_INCOMPLETE=0
fi
# Exit the script if the command line options are incomplete or incorrect
if [ -n "${OPTS_INCOMPLETE}" ]; then
    usage
    exit 1
fi

## Retrieve the command line arguments and set up directories, paths
mkdir -p ${DIR} # If the working directory does not exist, create it
SRC=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/src
PY=${SRC}/py
SH=${SRC}/sh
export BLASTDB=${DIR}

## Find the variant flanking sequences
echo "Finding SNP flanking sequences..."
SNP_FLANKS=${DIR}/snp_flanks.txt
${PY}/get_var_flanks.py -i ${SNP_ACC} -e ${EMAIL} -o ${SNP_FLANKS}

## Get the variant information, i.e. the start and stop positions of the major allele variant in the flanking sequence
echo "Getting SNP flank boundaries..."
SNP_INFO=${DIR}/snp_info.txt
${PY}/find_var_info.py -i ${SNP_FLANKS} -o ${SNP_INFO} 

## Construct a FASTA file out of the variant flanking sequence file
echo "Constructing FASTA file out of the SNP flanking sequences..."
SNP_FASTA=${DIR}/snp_flanks.fasta
${PY}/var_flanks_to_fasta.py -i ${SNP_FLANKS} -o ${SNP_FASTA}

## Create a BLAST database out of the variant FASTA file
echo "Creating a BLAST database out of the SNP flanks FASTA file..."
${SH}/makeblastdb.sh ${SNP_FASTA} ${DIR}

## Align the SRA datasets onto the variants (a la the BLAST database) using Magic-BLAST
echo "Aligning NGS datasets onto the SNPs..."
PATHS_LIST=${DIR}/mbo_pathstxt
MBO_DIR=${DIR}/mbo # We will store the .mbo files here
mkdir -p ${MBO_DIR} # Create the directory if it doesn't exist yet
# Specify the input file type
if [ -n "${IS_FASTQ}" ]
then
    INPUT_TYPE="-q"
elif [ -n "${IS_FASTA}" ]
then
    INPUT_TYPE="-a"
else
    INPUT_TYPE=""
fi
${SH}/magicblast.sh -i ${INPUT} -d snp_flanks -o ${MBO_DIR} -p ${PATHS_LIST} -t ${THREADS} -c ${PROCS} ${INPUT_TYPE}

## Call variants in the NGS datasets
echo "Calling SNPs..."
TSV=${DIR}/results.tsv
${SRC}/cpp/call_variants -m ${MBO_DIR} -v ${SNP_INFO} -o ${TSV}

echo "PSST run complete. Result file can be found at:"
echo ${TSV}

#!/usr/bin/env python
## Built-in packages
import argparse
from argparse import RawTextHelpFormatter
import sys
import os
import subprocess
import shlex
## Custom packages
from src import get_var_flanks
from src import find_var_info
from src import call_variants
from src import get_alleles

## Command line arguments
MAJOR_VERSION = 2
MINOR_VERSION = 1

parser = argparse.ArgumentParser(description=
'''
Polygenic SNP Search Tool (PSST) Version %d.%d 
Copyright (C) 2017 NCBI
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it under certain conditions.
''' % (MAJOR_VERSION, MINOR_VERSION), formatter_class=RawTextHelpFormatter)

parser.add_argument('ngs', metavar='NGS', type=str, help="path to the input file. Default: list of SRA accessions")
parser.add_argument('snp', metavar='SNP_FILE', type=str, help="path to the file containing SNP accessions")
parser.add_argument('dir', metavar='WORKING_DIR', type=str, help="directory to store temporary files")
parser.add_argument('email', metavar='EMAIL', type=str, help="email address for Entrez")
parser.add_argument('threads', metavar='THREADS', type=int, help="number of threads for each Magic-BLAST call")
parser.add_argument('child_procs', metavar='CHILD_PROCS', type=int, help="maximum number of child processes")
# Optional arguments
parser.add_argument('-f','--fastq', action='store_true', help="input is a FASTQ file")

args = parser.parse_args()

## Retrieve SRA and SNP accessions
print("Reading SRA and SNP accessions files...")

if not args.fastq:
    sra_acc = []
    with open(args.ngs,'r') as sra_file:
        for line in sra_file:
            sra_acc.append( line.rstrip() )

snp_acc = []
with open(args.snp,'r') as snp_file:
    for line in snp_file:
        snp_acc.append( line.rstrip() )

## Find the variant flanking sequences
print("Finding SNP flanking sequences...")
flanking_sequences = get_var_flanks.get_var_flanking_sequences(snp_acc,args.email)

## Get the variant flank length information
print("Getting SNP flank length information")
var_info = find_var_info.find_var_info(flanking_sequences)

## Construct a variant FASTA file
print("Creating SNP flank FASTA file...") 
fasta_path = "%s/snp_flanks.fasta" % (args.dir)
with open(fasta_path,'w') as fasta:
    for var_id in flanking_sequences:
        flanking_sequence = flanking_sequences[var_id]
        allele = get_alleles.get_nth_allele(flanking_sequence,2).rstrip() # Take the minor allele
        fasta.write( ">%s\n" % (var_id) )
        fasta.write( "%s\n" % (allele) )

# Get the directory that this script exists in, i.e. the path to the PSST directory on the machine
src = os.path.dirname( os.path.realpath(__file__) ) + "/src" 
## Create BLAST database out of the variant FASTA file
print("Creating a BLAST database out of the SNP flanking sequences...")
makeblastdb_command = "%s/makeblastdb.sh %s %s" % (src, fasta_path, args.dir)
subprocess.call( shlex.split(makeblastdb_command) )

mbo_directory = args.dir + "/mbo" 

if not os.path.exists(mbo_directory):
    os.makedirs(mbo_directory)

## Align the SRA dataset(s) or FASTQ file onto the SNP flanking sequences using Magic-BLAST
if args.fastq:
    blast_command = "%s/magicblast_fastq.sh %s snp_flanks %s %d" % (src, args.ngs, args.dir, args.threads) 
else:
    blast_command = "%s/magicblast_sra.sh %s snp_flanks %s %d %d" \
                  % (src, args.ngs, args.dir, args.threads, args.child_procs)
subprocess.call( shlex.split(blast_command) )

## Call variants
print("Calling variants...")
accession_map = {str( snp_acc.index(accession) ): accession for accession in snp_acc}
paths = call_variants.get_mbo_paths(mbo_directory)
map_paths_and_partition = {'map':accession_map,'paths':paths,'partition':paths.keys()}
sra_alignments = call_variants.get_sra_alignments(map_paths_and_partition)
alignments_and_info = {'alignments':sra_alignments,'keys':sra_alignments.keys(),'info':var_info}
called_variants = call_variants.call_sra_variants(alignments_and_info)
output_path = args.dir + "/results.tsv"
call_variants.create_tsv(called_variants,output_path)

print("PSST finished calling variants. You can find the results file at:")
print(output_path)
